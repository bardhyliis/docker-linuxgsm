#
# LinuxGSM Base Dockerfile
#
# https://github.com/GameServerManagers/docker-linuxgsm
#

FROM ghcr.io/gameservermanagers/steamcmd:ubuntu-24.04
## Remove steam user from upstream base image if present
RUN if id -u steam >/dev/null 2>&1; then echo "Removing steam user from base image"; userdel -r steam || true; else echo "steam user not present"; fi

LABEL maintainer="RayHosting <support@ray-hosting.com>"
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM=xterm
ENV LGSM_GITHUBUSER=bardhyliis
ENV LGSM_GITHUBREPO=LinuxGSM
ENV LGSM_GITHUBBRANCH=master
ENV LGSM_LOGDIR=/data/log
ENV LGSM_SERVERFILES=/data/serverfiles
ENV LGSM_DATADIR=/data/data
ENV LGSM_CONFIG=/data/config-lgsm
ENV LGSM_COMPRESSEDMAPSDIR=/data/Maps-Compressed
ENV LGSM_DEV=false
ENV GAMESERVER=
ENV VALIDATE_ON_START=false
ENV UPDATE_CHECK=60
ENV USER=rayhosting
ENV UID=1000
ENV GID=1000

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Install required packages: openssh-server, wget, acl, and tini.
RUN echo "**** Install Base Packages ****" \
    && apt-get update && apt-get install -y \
    openssh-server \
    wget \
    acl \
    tini \
    findutils \
    rsnapshot \
    && apt-get clean

## Install Base LinuxGSM Requirements
RUN echo "**** Install Base LinuxGSM Requirements ****" \
  && apt-get update \
  && apt-get install -y software-properties-common \
  && add-apt-repository multiverse \
  && add-apt-repository ppa:git-core/ppa \
  && add-apt-repository ppa:dotnet/backports \
  && apt-get update \
  && apt-get install -y \
  bc \
  binutils \
  bsdmainutils \
  bzip2 \
  ca-certificates \
  cpio \
  cron \
  curl \
  distro-info \
  file \
  git \
  gnupg \
  gosu \
  gzip \
  hostname \
  jq \
  lib32gcc-s1 \
  lib32stdc++6 \
  netcat-openbsd \
  pigz \
  python3 \
  sudo \
  tar \
  tmux \
  unzip \
  util-linux \
  uuid-runtime \
  # wget \
  libxml2-utils \
  xz-utils \
  zstd \
  # Docker Extras
  iproute2 \
  iputils-ping \
  nano \
  vim \
  && apt-get -y autoremove \
  && apt-get -y clean \
  && rm -rf /var/lib/apt/lists/* \
  && rm -rf /tmp/* \
  && rm -rf /var/tmp/*

# Install gotty
RUN cd / && \
    wget https://github.com/yudai/gotty/releases/download/v1.0.1/gotty_linux_amd64.tar.gz && \
    tar -xvf gotty_linux_amd64.tar.gz && \
    mv gotty /usr/local/bin/ && \
    chmod +x /usr/local/bin/gotty && \
    rm -f gotty_linux_amd64.tar.gz

# Install Node.js
RUN echo "**** Install Node.js ****" \
  && set -uex \
  && mkdir -p /etc/apt/keyrings \
  && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
  && NODE_MAJOR=20 \
  && echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
  && apt-get update \
  && apt-get install nodejs -y \
  && apt-get -y autoremove \
  && apt-get -y clean \
  && rm -rf /var/lib/apt/lists/* \
  && rm -rf /tmp/* \
  && rm -rf /var/tmp/* \
  && npm install -g npm@latest

# Install GameDig https://docs.linuxgsm.com/requirements/gamedig
RUN echo "**** Install GameDig ****" \
  && npm install -g gamedig@5

WORKDIR /app

## Add rayhosting user
RUN echo "**** Add rayhosting user ****" \
  && mkdir /data \
  # Create the user
  && groupadd --gid $GID $USER \
  && useradd --uid $UID --gid $GID -m $USER \
  #
  # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
  && echo $USER ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USER \
  && chmod 0440 /etc/sudoers.d/$USER \
  && chown $USER:$USER /data

HEALTHCHECK --interval=1m --timeout=1m --start-period=2m --retries=1 CMD /app/entrypoint-healthcheck.sh || exit 1

# ---- create a clean Wine prefix for rayhosting ----
# USER $USER
# RUN WINEDEBUG=-all WINEDLLOVERRIDES="mshtml,mscoree=" wineboot --init
# #RUN env DISPLAY=:99 xvfb-run --server-args="-terminate" wineboot -u
# USER root

## Download linuxgsm.sh
RUN echo "**** Download linuxgsm.sh ****" \
  && set -ex \
  && curl -Lo linuxgsm.sh "https://raw.githubusercontent.com/bardhyliis/LinuxGSM/${LGSM_GITHUBBRANCH}/linuxgsm.sh" \
  && chmod +x linuxgsm.sh

RUN echo "**** Get LinuxGSM Modules ****" \
  && git clone --filter=blob:none --no-checkout --sparse https://github.com/bardhyliis/LinuxGSM.git \
  && cd LinuxGSM \
  && git sparse-checkout set --cone \
  && git sparse-checkout set lgsm/modules \
  && git checkout ${LGSM_GITHUBBRANCH} \
  && mkdir -p /app/lgsm/modules \
  && mv lgsm/modules/* /app/lgsm/modules \
  && chmod +x /app/lgsm/modules/* \
  && cd ../ \
  && rm -rf LinuxGSM \
  && chown -R $USER:$USER /app

ARG CACHEBUST=1
RUN echo "$CACHEBUST"

COPY entrypoint.sh /app/entrypoint.sh
COPY entrypoint-user.sh /app/entrypoint-user.sh
COPY entrypoint-healthcheck.sh /app/entrypoint-healthcheck.sh

## Ensure entrypoint scripts have execute permissions
RUN chmod +x /app/entrypoint.sh /app/entrypoint-user.sh /app/entrypoint-healthcheck.sh

RUN date > /build-time.txt

ENTRYPOINT ["/bin/bash", "./entrypoint.sh"]
